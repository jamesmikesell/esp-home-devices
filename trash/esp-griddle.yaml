esphome:
  name: esp-griddle
  on_boot:
    priority: -5000
    then:
      - lambda: !lambda |-
          id(pid_griddle).set_kp(id(ui_kp).state);
          id(pid_griddle).set_ki(id(ui_ki).state);
          id(pid_griddle).set_kd(id(ui_kd).state);


esp8266:
  board: d1_mini
  restore_from_flash: true

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""

ota:
  password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # use_address: esphome-web-e3b9d3.local

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "esp-griddle"
    password: !secret wifi_password

captive_portal:


web_server:
  port: 80



i2c:
  scl: D1
  sda: D2
  scan: true


sensor:
  - platform: mlx90614
    object:
      id: ir_temp_sensor
      name: Temperature IR
      # filters:
      #   - sliding_window_moving_average:
      #       window_size: 5
      #       send_every: 1
    ambient:
      id: temp_case
      name: Temperature Case
    update_interval: 1s
  - platform: template
    id: ui_float_output
    name: "Griddle Output"
    unit_of_measurement: "%"
    update_interval: 1s




binary_sensor:
  - platform: template
    name: "Griddle  Call"
    id: griddle_call




output:
  - platform: sigma_delta_output
    id: pwm_output
    update_interval: 5s
    # restart_cycle_on_state_change: false
    turn_on_action:
      - binary_sensor.template.publish:
          id: griddle_call
          state: ON
    turn_off_action:
      - binary_sensor.template.publish:
          id: griddle_call
          state: OFF
  - platform: template
    id: float_output
    type: float
    write_action:
      - output.set_level:
          id: pwm_output
          level: !lambda return state;
      - sensor.template.publish:
          id: ui_float_output
          state: !lambda return state * 100.0;





climate:
  - platform: pid
    id: pid_griddle
    name: "PID Griddle Controller"
    sensor: ir_temp_sensor
    default_target_temperature: 300째F
    heat_output: float_output
    visual:
      min_temperature: 60째F
      max_temperature: 400째F
      temperature_step: 5째F
    control_parameters:
      kp: 0.04483
      ki: 0.00054
      kd: 0.93015
      output_averaging_samples: 5
      derivative_averaging_samples: 5





button:
  - platform: template
    name: "PID Autotune"
    on_press:
      - climate.pid.set_control_parameters:
            id: pid_griddle
            kp: 0.0
            ki: 0.0
            kd: 0.0
      - climate.pid.autotune: 
          id: pid_griddle
          noiseband: 0
  - platform: template
    name: "Save Autotune"
    on_press:
      then:
        - lambda: |-
            id(ui_kp).state = id(pid_griddle).get_kp();
            id(ui_ki).state = id(pid_griddle).get_ki();
            id(ui_kd).state = id(pid_griddle).get_kd();
  - platform: template
    name: "Log Autotune"
    on_press:
      then:
        - lambda: |-
            ESP_LOGD("main", "%f", id(pid_griddle).get_kp());
            ESP_LOGD("main", "%f", id(pid_griddle).get_ki());
            ESP_LOGD("main", "%f", id(pid_griddle).get_kd());




number:
  - platform: template
    name: 1 kp
    id: ui_kp
    min_value: -1000
    max_value: 1000
    step: .00001
    mode: box
    restore_value: true
    # update_interval: 1s
    # optimistic: true
    set_action:
      then:
        - lambda: !lambda |-
            id(pid_griddle).set_kp(x);
  - platform: template
    name: 2 ki
    id: ui_ki
    min_value: -1000
    max_value: 1000
    step: .00001
    mode: box
    restore_value: true
    # update_interval: 1s
    # optimistic: true
    set_action:
      then:
        - lambda: !lambda |-
            id(pid_griddle).set_ki(x);
  - platform: template
    name: 3 kd
    id: ui_kd
    min_value: -1000
    max_value: 1000
    step: .00001
    mode: box
    restore_value: true
    # update_interval: 1s
    # optimistic: true
    set_action:
      then:
        - lambda: !lambda |-
            id(pid_griddle).set_kd(x);




